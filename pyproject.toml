[build-system]
build-backend = "poetry.core.masonry.api"
requires = [ "poetry-core>=1.9" ]

[tool.poetry]
name = "wemake-python-styleguide"
version = "1.0.0"
description = "The strictest and most opinionated python linter ever"

license = "MIT"

authors = [
  "Nikita Sobolev <mail@sobolevn.me>",
]

readme = "README.md"

repository = "https://github.com/wemake-services/wemake-python-styleguide"
homepage = "https://wemake-python-styleguide.rtfd.io"

keywords = [
  "flake8",
  "flake8-plugin",
  "flake8-formatter",
  "linter",
  "wemake.services",
  "styleguide",
  "code quality",
  "pycqa",
]

classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Environment :: Console",
  "Framework :: Flake8",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Software Development :: Quality Assurance",
  "Typing :: Typed",
]

[tool.poetry.urls]
"Funding" = "https://opencollective.com/wemake-python-styleguide"

[tool.poetry.plugins."flake8.extension"]
WPS = "wemake_python_styleguide.checker:Checker"

[tool.poetry.plugins."flake8.report"]
wemake = "wemake_python_styleguide.formatter:WemakeFormatter"

[tool.poetry.dependencies]
python = "^3.10"

flake8 = "^7.1"
attrs = "*"
pygments = "^2.4"

[tool.poetry.group.dev.dependencies]
pytest = "^8.1"
pytest-cov = "^6.0"
pytest-randomly = "^3.12"
pytest-xdist = "^3.6"
covdefaults = "^2.3"
syrupy = "^4.6"
hypothesis = "^6.35"
hypothesmith = "^0.3"

mypy = "^1.13"
types-flake8 = "^7.1"

import-linter = "^2.0"

astpath = "^0.9"
lxml = "^5.1"
nbqa = "^1.2"
ruff = "^0.8"
black = "^24.10"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
sphinx = "^8.1"
sphinx-autodoc-typehints = ">=2,<4"
sphinxcontrib-mermaid = "^1.0"
added-value = "^0.24"
tomli = "^2.0"
myst-parser = "^4.0"

[tool.black]
line-length = 80
preview = true
skip-string-normalization = true # we use '
target-version = [ 'py310' ]
# Exclude intentionally bad files:
extend-exclude = '''
(
  tests/.*/__snapshots__/.* | tests/fixtures/.*
)
'''

[tool.ruff]
# Ruff config: https://docs.astral.sh/ruff/settings
target-version = "py310"
line-length = 80
extend-exclude = [
  # Intentionally bad code:
  "tests/**/__snapshots__/**",
  "tests/fixtures/**",
]

preview = true
fix = true
format.quote-style = "single"
format.docstring-code-format = false
lint.select = [
  "A",    # flake8-builtins
  "B",    # flake8-bugbear
  "C4",   # flake8-comprehensions
  "C90",  # maccabe
  "COM",  # flake8-commas
  "D",    # pydocstyle
  "DTZ",  # flake8-datetimez
  "E",    # pycodestyle
  "ERA",  # flake8-eradicate
  "EXE",  # flake8-executable
  "F",    # pyflakes
  "FBT",  # flake8-boolean-trap
  "FLY",  # pyflint
  "FURB", # refurb
  "G",    # flake8-logging-format
  "I",    # isort
  "ICN",  # flake8-import-conventions
  "ISC",  # flake8-implicit-str-concat
  "LOG",  # flake8-logging
  "N",    # pep8-naming
  "PERF", # perflint
  "PIE",  # flake8-pie
  "PL",   # pylint
  "PT",   # flake8-pytest-style
  "PTH",  # flake8-use-pathlib
  "Q",    # flake8-quotes
  "RET",  # flake8-return
  "RSE",  # flake8-raise
  "RUF",  # ruff
  "S",    # flake8-bandit
  "SIM",  # flake8-simpify
  "SLF",  # flake8-self
  "SLOT", # flake8-slots
  "T100", # flake8-debugger
  "TRY",  # tryceratops
  "UP",   # pyupgrade
  "W",    # pycodestyle
  "YTT",  # flake8-2020
]
lint.ignore = [
  "A005",   # allow to shadow stdlib and builtin module names
  "COM812", # trailing comma, conflicts with `ruff format`
  # Different doc rules that we don't really care about:
  "D100",
  "D104",
  "D106",
  "D203",
  "D212",
  "D401",
  "D404",
  "D405",
  "ISC001",  # implicit string concat conflicts with `ruff format`
  "ISC003",  # prefer explicit string concat over implicit concat
  "PLR09",   # we have our own complexity rules
  "PLR2004", # do not report magic numbers
  "PLR6301", # do not require classmethod / staticmethod when self not used
  "TRY003",  # long exception messages from `tryceratops`
]
lint.per-file-ignores."tests/*.py" = [
  "S101", # asserts
  "S105", # hardcoded passwords
  "S404", # subprocess calls are for tests
  "S603", # do not require `shell=True`
  "S607", # partial executable paths
]
lint.per-file-ignores."wemake_python_styleguide/compat/nodes.py" = [ "ICN003", "PLC0414" ]
lint.per-file-ignores."wemake_python_styleguide/types.py" = [ "D102" ]
lint.per-file-ignores."wemake_python_styleguide/visitors/ast/*.py" = [ "N802" ]
lint.external = [ "WPS" ]
lint.flake8-import-conventions.banned-from = [ "ast" ]
lint.flake8-quotes.inline-quotes = "single"
lint.mccabe.max-complexity = 6
lint.pydocstyle.convention = "google"

[tool.pytest.ini_options]
# pytest config: http://doc.pytest.org/en/latest/customize.html

# Strict `@xfail` by default:
xfail_strict = true
# Fail on warnings:
filterwarnings = [ "error" ]

addopts = [
  "--strict",
  "--doctest-modules",
  # pytest-cov
  "--cov=wemake_python_styleguide",
  "--cov=tests",
  "--cov-branch",
  "--cov-report=term-missing:skip-covered",
  "--cov-report=html",
  "--cov-report=xml",
  "--cov-fail-under=100",
  # pytest-xdist
  "-n=auto",
  # Custom ignored dirs with bad code:
  "--ignore=tests/fixtures",
  "--ignore=docs",
]

[tool.coverage.run]
# Coverage configuration: https://coverage.readthedocs.io/

# We don't need to cover some files. They are fully checked with mypy.
# And don't contain any logic.
omit = [
  # Does not contain runtime logic:
  "wemake_python_styleguide/types.py",
  # All version specific tests:
  "tests/**/*312.py",
]

# Here we specify plugins for coverage to be used:
plugins = [
  "covdefaults",
]

[tool.mypy]
# The mypy configurations: http://bit.ly/2zEl9WI
ignore_missing_imports = true
strict = true
local_partial_types = true
warn_unreachable = true

enable_error_code = [
  "truthy-bool",
  "truthy-iterable",
  "redundant-expr",
  "unused-awaitable",
  # "ignore-without-code",
  "possibly-undefined",
  "redundant-self",
  # "explicit-override",
  # "mutable-override",
  "unimported-reveal",
  "deprecated",
]

disable_error_code = [
  "no-untyped-def", # TODO: fix
]

[[tool.mypy.overrides]]
module = "wemake_python_styleguide.compat.nodes"
# We allow explicit `Any` only in this file, because of the compatibility:
disallow_any_explicit = false

[[tool.mypy.overrides]]
module = "wemake_python_styleguide.compat.packaging"
# We allow unused `ignore` comments, because we cannot sync it between versions:
warn_unused_ignores = false
